version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: booking-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-booking_system}
      POSTGRES_USER: ${POSTGRES_USER:-booking_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-booking_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-booking_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booking-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: booking-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booking-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: booking-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${BACKEND_PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-booking_user}:${POSTGRES_PASSWORD:-booking_password}@postgres:5432/${POSTGRES_DB:-booking_system}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      JWT_EXPIRY: ${JWT_EXPIRY:-1h}
      JWT_REFRESH_EXPIRY: ${JWT_REFRESH_EXPIRY:-7d}
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev
    networks:
      - booking-network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: booking-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000/api/v1}
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm run dev
    networks:
      - booking-network

  # Test Database (isolated for testing)
  postgres-test:
    image: postgres:15-alpine
    container_name: booking-postgres-test
    environment:
      POSTGRES_DB: ${POSTGRES_TEST_DB:-booking_system_test}
      POSTGRES_USER: ${POSTGRES_USER:-booking_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-booking_password}
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-booking_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booking-network
    profiles:
      - test

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: booking-redis-test
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booking-network
    profiles:
      - test

volumes:
  postgres_data:
  postgres_test_data:
  redis_data:

networks:
  booking-network:
    driver: bridge
